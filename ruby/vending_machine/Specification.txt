
Suicaクラス
- インスタンス変数
    - self.balance：初期残高500円

- メソッド
    - deposit(price)
        - 100円以上ならチャージOK（self.balanceに加算）
        - 100円未満の場合は例外(ValueError)を発生させる
            - メッセージ例：raise ValueError("100円以上のチャージをしてください")
    - current_balance()
        - 現在の残高をreturnする
まだ！！！！！    - withdraw(price)　
        - 購入処理の際、Suicaの残高を減らすメソッド
        - 引数として受け取った金額を残高から引く
        - 残高が不足していた場合は、例外(InsufficientBalanceError)を発生させる
            - メッセージ例：raise InsufficientBalanceError("チャージ残高が足りません")

自動販売機クラス（VendingMachine）
- インスタンス変数
    - self.juice：初期状態でペプシ(150円)を5本格納
        self.juice = {"ペプシ": {"price": 150, "stock": 5}}
    - self.salesを定義し、初期値0を設定

- メソッド
    - get_stock()
        - 在庫情報を辞書の形で返す
        # 出力例
        {"ペプシ": 5}
    - get_juice_price(juice_name)
        - ジュース名を受け取り、その価格を返すメソッド
        - ジュース名が存在しない場合は例外（JuiceNotFoundError）を発生させる
            - メッセージ例：raise JuiceNotFoundError("ペプシは取り扱っていません")
    - reduce_stock(juice_name, quantity)
        - ジュース名と本数を受け取り、その分在庫を減らすメソッド
        - 在庫が不足している場合は例外（StockError）を発生させる
            - メッセージ例：raise StockError("ペプシの在庫が不足しています。現在の在庫は〇本です")
    - add_sales(amount)
        - 売上金額を増やすメソッド
        - 引数で受け取った購入金額をself.salesに加算
    - get_sales()
        - 現在の売上金額をreturnする
    - purchase_process(juice_name, quantity, suica)
        - ジュース名、購入本数、Suicaインスタンスを引数に取る
        - 購入可能かチェックを行う
            - Suica残高がジュース価格×購入本数以上か
            - 在庫が購入本数以上あるか
        - 購入可能なら以下の処理を順番に行う
            1. Suicaの残高を減らす（suica.withdraw()を使用）
            2. 自動販売機の在庫を減らす（reduce_stock()を使用）
            3. 自動販売機の売上金額を増やす（add_sales()を使用）
        - 購入不可なら、それぞれの条件に応じた例外を発生させる
            - 残高不足ならInsufficientBalanceError
            - 在庫不足ならStockError
